{"remainingRequest":"D:\\teamPlanProject\\teamplan\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\teamPlanProject\\teamplan\\src\\views\\home\\verificationCode.vue?vue&type=style&index=0&id=3cb8782e&scoped=true&lang=css&","dependencies":[{"path":"D:\\teamPlanProject\\teamplan\\src\\views\\home\\verificationCode.vue","mtime":1595484593441},{"path":"D:\\teamPlanProject\\teamplan\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\teamPlanProject\\teamplan\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\teamPlanProject\\teamplan\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\teamPlanProject\\teamplan\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\teamPlanProject\\teamplan\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnMtY2FudmFzIHsKICAgIG1hcmdpbi1sZWZ0OiAyMTBweDsKICAgIG1hcmdpbi10b3A6IC00MHB4Owp9Cg=="},{"version":3,"sources":["verificationCode.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuIA;AACA;AACA;AACA","file":"verificationCode.vue","sourceRoot":"src/views/home","sourcesContent":["/**\r\n* @author: hao.ling\r\n* @date: 2020/7/22 15:10\r\n* @Description: 图形验证码\r\n*/\r\n<template>\r\n    <div class=\"s-canvas\">\r\n        <canvas id=\"s-canvas\" :width=\"contentWidth\" :height=\"contentHeight\"></canvas>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: \"verificationCode\",\r\n        props: {\r\n            identifyCode: {\r\n                type: String,\r\n                default: \"1234\"\r\n            },\r\n            fontSizeMin: {\r\n                type: Number,\r\n                default: 35\r\n            },\r\n            fontSizeMax: {\r\n                type: Number,\r\n                default: 35\r\n            },\r\n            backgroundColorMin: {\r\n                type: Number,\r\n                default: 180\r\n            },\r\n            backgroundColorMax: {\r\n                type: Number,\r\n                default: 240\r\n            },\r\n            colorMin: {\r\n                type: Number,\r\n                default: 50\r\n            },\r\n            colorMax: {\r\n                type: Number,\r\n                default: 160\r\n            },\r\n            lineColorMin: {\r\n                type: Number,\r\n                default: 100\r\n            },\r\n            lineColorMax: {\r\n                type: Number,\r\n                default: 200\r\n            },\r\n            dotColorMin: {\r\n                type: Number,\r\n                default: 0\r\n            },\r\n            dotColorMax: {\r\n                type: Number,\r\n                default: 255\r\n            },\r\n            contentWidth: {\r\n                type: Number,\r\n                default: 120\r\n            },\r\n            contentHeight: {\r\n                type: Number,\r\n                default: 40\r\n            }\r\n        },\r\n        methods: {\r\n            randomNum(min, max) {\r\n                return Math.floor(Math.random() * (max - min) + min)\r\n            },\r\n            randomColor(min, max) {\r\n                let r = this.randomNum(min, max)\r\n                let g = this.randomNum(min, max)\r\n                let b = this.randomNum(min, max)\r\n                return \"rgb(\" + r + \",\" + g + \",\" + b + \")\"\r\n            },\r\n            transparent() {\r\n                return \"rgb(255,255,255)\"\r\n            },\r\n            drawPic() {\r\n                let canvas = document.getElementById(\"s-canvas\")\r\n                let ctx = canvas.getContext(\"2d\")\r\n                ctx.textBaseline = \"bottom\"\r\n                ctx.fillStyle = this.transparent()\r\n                ctx.fillRect(0, 0, this.contentWidth, this.contentHeight)\r\n                for (let i = 0; i < this.identifyCode.length; i++) {\r\n                    this.drawText(ctx, this.identifyCode[i], i)\r\n                }\r\n                this.drawLine(ctx)\r\n                this.drawDot(ctx)\r\n            },\r\n            drawText(ctx, txt, i) {\r\n                ctx.fillStyle = this.randomColor(this.colorMin, this.colorMax)\r\n                ctx.font = this.randomNum(this.fontSizeMin, this.fontSizeMax) + \"px SimHei\"\r\n                let x = (i + 1) * (this.contentWidth / (this.identifyCode.length + 1))\r\n                let y = this.randomNum(this.fontSizeMax, this.contentHeight - 5)\r\n                const deg = this.randomNum(-10, 10)\r\n                ctx.translate(x, y)\r\n                ctx.rotate((deg * Math.PI) / 180)\r\n                ctx.fillText(txt, 0, 0)\r\n                ctx.rotate((-deg * Math.PI) / 180)\r\n                ctx.translate(-x, -y)\r\n            },\r\n            drawLine(ctx) {\r\n                for (let i = 0; i < 8; i++) {\r\n                    ctx.fillStyle = this.randomColor(this.lineColorMin, this.lineColorMax)\r\n                    ctx.beginPath()\r\n                    ctx.moveTo(this.randomNum(0, this.contentWidth), this.randomNum(0, this.contentHeight))\r\n                    ctx.lineTo(this.randomNum(0, this.contentWidth), this.randomNum(0, this.contentHeight))\r\n                    ctx.stroke()\r\n                }\r\n            },\r\n            drawDot(ctx) {\r\n                for (let i = 0; i < 100; i++) {\r\n                    ctx.fillStyle = this.randomColor(0, 255)\r\n                    ctx.beginPath()\r\n                    ctx.arc(this.randomNum(0, this.contentWidth), this.randomNum(0, this.contentHeight), 1, 0, 2 * Math.PI)\r\n                    ctx.fill()\r\n                }\r\n            }\r\n        },\r\n        watch: {\r\n            identifyCode() {\r\n                this.drawPic();\r\n            }\r\n        },\r\n        mounted() {\r\n            this.drawPic()\r\n        }\r\n    }\r\n</script>\r\n\r\n<style scoped>\r\n    .s-canvas {\r\n        margin-left: 210px;\r\n        margin-top: -40px;\r\n    }\r\n</style>"]}]}